// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectCondoManagement.Data.Entites.CondosDb;

#nullable disable

namespace ProjectCondoManagement.Migrations.CondosDb
{
    [DbContext(typeof(DataContextCondos))]
    [Migration("20250912100354_VoteVotingDocument_Removal")]
    partial class VoteVotingDocument_Removal
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CondoMemberMeeting", b =>
                {
                    b.Property<int>("CondoMembersId")
                        .HasColumnType("int");

                    b.Property<int>("MeetingsAttendedId")
                        .HasColumnType("int");

                    b.HasKey("CondoMembersId", "MeetingsAttendedId");

                    b.HasIndex("MeetingsAttendedId");

                    b.ToTable("CondoMemberMeeting");
                });

            modelBuilder.Entity("CondoMemberUnit", b =>
                {
                    b.Property<int>("CondoMembersId")
                        .HasColumnType("int");

                    b.Property<int>("UnitsId")
                        .HasColumnType("int");

                    b.HasKey("CondoMembersId", "UnitsId");

                    b.HasIndex("UnitsId");

                    b.ToTable("CondoMemberUnit");
                });

            modelBuilder.Entity("OccurrenceUnit", b =>
                {
                    b.Property<int>("OccurrencesId")
                        .HasColumnType("int");

                    b.Property<int>("UnitsId")
                        .HasColumnType("int");

                    b.HasKey("OccurrencesId", "UnitsId");

                    b.HasIndex("UnitsId");

                    b.ToTable("OccurrenceUnit");
                });

            modelBuilder.Entity("ProjectCondoManagement.Data.Entites.CondosDb.CondoMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FinancialAccountId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdDocument")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxIdNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CondoMembers");
                });

            modelBuilder.Entity("ProjectCondoManagement.Data.Entites.CondosDb.Condominium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CondoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FinancialAccountId")
                        .HasColumnType("int");

                    b.Property<string>("ManagerUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Condominiums");
                });

            modelBuilder.Entity("ProjectCondoManagement.Data.Entites.CondosDb.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CondominiumId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsExtraMeeting")
                        .HasColumnType("bit");

                    b.Property<string>("MeetingLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CondominiumId");

                    b.ToTable("Meeting");
                });

            modelBuilder.Entity("ProjectCondoManagement.Data.Entites.CondosDb.Occurrence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CondominiumId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit");

                    b.Property<int?>("MeetingId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResolutionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CondominiumId");

                    b.HasIndex("MeetingId");

                    b.ToTable("Occurences");
                });

            modelBuilder.Entity("ProjectCondoManagement.Data.Entites.CondosDb.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Bedrooms")
                        .HasColumnType("int");

                    b.Property<int>("CondominiumId")
                        .HasColumnType("int");

                    b.Property<string>("Door")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CondominiumId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("CondoMemberMeeting", b =>
                {
                    b.HasOne("ProjectCondoManagement.Data.Entites.CondosDb.CondoMember", null)
                        .WithMany()
                        .HasForeignKey("CondoMembersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectCondoManagement.Data.Entites.CondosDb.Meeting", null)
                        .WithMany()
                        .HasForeignKey("MeetingsAttendedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CondoMemberUnit", b =>
                {
                    b.HasOne("ProjectCondoManagement.Data.Entites.CondosDb.CondoMember", null)
                        .WithMany()
                        .HasForeignKey("CondoMembersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectCondoManagement.Data.Entites.CondosDb.Unit", null)
                        .WithMany()
                        .HasForeignKey("UnitsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OccurrenceUnit", b =>
                {
                    b.HasOne("ProjectCondoManagement.Data.Entites.CondosDb.Occurrence", null)
                        .WithMany()
                        .HasForeignKey("OccurrencesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectCondoManagement.Data.Entites.CondosDb.Unit", null)
                        .WithMany()
                        .HasForeignKey("UnitsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectCondoManagement.Data.Entites.CondosDb.Meeting", b =>
                {
                    b.HasOne("ProjectCondoManagement.Data.Entites.CondosDb.Condominium", null)
                        .WithMany("Meetings")
                        .HasForeignKey("CondominiumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectCondoManagement.Data.Entites.CondosDb.Occurrence", b =>
                {
                    b.HasOne("ProjectCondoManagement.Data.Entites.CondosDb.Condominium", null)
                        .WithMany("Occurrences")
                        .HasForeignKey("CondominiumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ProjectCondoManagement.Data.Entites.CondosDb.Meeting", "Meeting")
                        .WithMany("Occurences")
                        .HasForeignKey("MeetingId");

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("ProjectCondoManagement.Data.Entites.CondosDb.Unit", b =>
                {
                    b.HasOne("ProjectCondoManagement.Data.Entites.CondosDb.Condominium", "Condominium")
                        .WithMany("Units")
                        .HasForeignKey("CondominiumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Condominium");
                });

            modelBuilder.Entity("ProjectCondoManagement.Data.Entites.CondosDb.Condominium", b =>
                {
                    b.Navigation("Meetings");

                    b.Navigation("Occurrences");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("ProjectCondoManagement.Data.Entites.CondosDb.Meeting", b =>
                {
                    b.Navigation("Occurences");
                });
#pragma warning restore 612, 618
        }
    }
}
