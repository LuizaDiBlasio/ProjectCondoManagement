@model IEnumerable<ClassLibrary.DtoModels.CondominiumWithMeetingsDto>

@{
	ViewData["Title"] = "Condominium Meetings";
}

<div class="row page-titles mx-0 d-flex align-items-center">
	<div class="col-sm-6 p-md-0">
		<div class="welcome-text">
			<h4>Condominium Meetings</h4>
		</div>
	</div>
	@if (User.IsInRole("CondoManager"))
	{
		<div class="col-sm-6 p-md-0 text-sm-end mt-2 mt-sm-0">
			<a asp-controller="Meeting" asp-action="CreateMeeting" class="btn btn-primary me-2">Arrange Meeting</a>
		</div>
	}
</div>

@if (!Model.Any())
{
	<p class="mt-4">No condominiums found with meetings.</p>
}
else
{
	<div class="accordion" id="meetingsAccordion">
		@foreach (var condo in Model)
		{
			<div class="accordion-item mt-4">
				<h2 class="accordion-header" id="heading_@condo.CondominiumId">
					<button class="accordion-button collapsed" type="button" data-bs-toggle="collapse"
					data-bs-target="#collapse_@condo.CondominiumId" aria-expanded="false"
					aria-controls="collapse_@condo.CondominiumId">
						@condo.CondoName
					</button>
				</h2>
				<div id="collapse_@condo.CondominiumId" class="accordion-collapse collapse"
				aria-labelledby="heading_@condo.CondominiumId" data-bs-parent="#meetingsAccordion">
					<div class="accordion-body p-0">
						@if (condo.MeetingsDto != null && condo.MeetingsDto.Any())
						{
							<div class="table-responsive">
								<table class="table table-striped table-hover">
									<thead>
										<tr>
											<th>Subject</th>
											<th>Date and time</th>
											<th>Type</th>
											<th></th>
											<th></th>
										</tr>
									</thead>
									<tbody>
										@foreach (var meeting in condo.MeetingsDto)
										{
											<tr>
												<td>@Html.DisplayFor(modelItem => meeting.Title)</td>
												<td>@meeting.DateAndTime</td>
												@if (meeting.IsExtraMeeting)
												{
													<td>
														Extra
													</td>
												}
												else
												{
													<td>
														Regular
													</td>
												}
												<td>
													@if (!string.IsNullOrEmpty(meeting.MeetingLink))
													{
														var now = DateTime.Now;
														var start = meeting.DateAndTime.AddHours(-3);
														var end = meeting.DateAndTime.AddHours(3);

														if (now >= start && now <= end)
														{
															<a href="@meeting.MeetingLink" target="_blank" class="btn btn-sm btn-outline-primary">
																<i class="bi bi-link-45deg"></i> Join Meeting
															</a>
														}
													}
												</td>
												<td>
													@if (User.IsInRole("CondoManager"))
													{
														@Html.ActionLink("Modify", "EditMeeting", new { id = meeting.Id }, new { @class = "btn btn-outline-secondary" })
														<a href="#" class="btn btn-outline-danger " data-id="@meeting.Id" data-bs-toggle="modal" data-bs-target="#deleteDialog">Cancel meeting</a>
													}
													@Html.ActionLink("Details", "DetailsMeeting", new { id = meeting.Id }, new { @class = "btn btn-outline-info" })
												</td>
											</tr>
		}
		</tbody>
		</table>
		</div>
}
else
{
<p class="mt-3 text-center text-muted">No meetings found for this condominium.</p>
}
</div>
</div>
</div>
}
</div>
}


<div id="deleteDialog" class="modal fade">
	<div class="modal-dialog modal-sm">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="deleteModalLabel">Cancel Meeting</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<p>Are you sure you want to cancel this meeting?</p>
				<div id="delete-error-message" class="text-danger"></div>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="btnNoDelete">No</button>
				<button type="button" class="btn btn-danger" id="btnYesDelete">Yes</button>
			</div>
		</div>
	</div>
</div>

@section Scripts {
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}

	<script type="text/javascript">
		$(document).ready(function () {
			var idToDelete = 0;

			// Use o seletor para o link que abre o modal de deleção
			$('a[data-bs-target="#deleteDialog"]').click(function () {
				idToDelete = $(this).data('id');
				// Limpe a mensagem de erro anterior quando o modal é reaberto
				$('#delete-error-message').text('').hide();
			});

			$("#btnYesDelete").click(function () {
				console.log('ID para deletar:', idToDelete);
				console.log('URL da requisição:', '/Meeting/RequestDeleteMeeting/' + idToDelete);

				$.ajax({
					url: '/Meeting/RequestDeleteMeeting/' + idToDelete,
					type: 'DELETE',
					success: function (response) {
						// Verifique se a operação foi um sucesso
						if (response.success) {
							$("#deleteDialog").modal('hide'); // Fecha a modal APENAS no sucesso
							window.location.reload();
						} else {
							// Se for um erro, exibe a mensagem, mas NÃO fecha a modal
							$('#delete-error-message').text(response.message).show();
						}
					},
					error: function (xhr, status, error) {
						// Tratar erros de servidor (por exemplo, 500 Internal Server Error)
						$("#deleteDialog").modal('hide');
						console.error('AJAX Error:', status, error, xhr.responseText);
						alert('Unexpected error, try again later.');
					}
				});
			});

			$("#btnNoDelete").click(function () {
				$("#deleteDialog").modal('hide');
			});
		});
	</script>
}
