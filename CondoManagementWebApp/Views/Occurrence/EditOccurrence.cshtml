@model CondoManagementWebApp.Models.EditOccurrenceViewModel

@{
    ViewData["Title"] = "EditOccurrence";
}

<div class="fix-wrapper">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-10 col-md-12">
                <div class="card mb-0 h-auto">
                    <div class="card-body">

                        <h4 class="text-center mb-4">Modify Occurrence</h4>

                        <hr class="mt-4 mb-5" style="border-top: 1px solid #e0e0e0; opacity: 0.8;" />

                        <div asp-validation-summary="ModelOnly" class="text-danger text-center"></div>

                        <form asp-action="RequestEditOccurrence">
                            <input type="hidden" asp-for="Id" />
                            <input type="hidden" asp-for="CondominiumId" />
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group mb-4">
                                        <label asp-for="Subject" class="form-label"></label>
                                        <input asp-for="Subject" class="form-control" />
                                        <span asp-validation-for="Subject" class="text-danger"></span>
                                    </div>
                                    <div class="form-group mb-4">
                                        <label asp-for="Details" class="form-label"></label>
                                        <textarea asp-for="Details" class="form-control" rows="3"></textarea>
                                        <span asp-validation-for="Details" class="text-danger"></span>
                                    </div>
                                    <div class="form-group mb-4">
                                        <label asp-for="DateAndTime" class="form-label"></label>
                                        <input asp-for="DateAndTime" class="form-control" id="dateAndTime" />
                                        <span asp-validation-for="DateAndTime" class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group mb-4">
                                        <label asp-for="CondominiumId" class="form-label">Condominium </label>
                                        <select asp-for="CondominiumId" asp-items="Model.CondosToSelect" class="form-control" id="condominiumSelect">
                                            <option value="">-- Select Condominium --</option>
                                        </select>
                                        <span asp-validation-for="CondominiumId" class="text-danger"></span>
                                    </div>

                                    <div class="form-group mb-4">
                                        <label asp-for="SelectedUnitIds" class="form-label">Select units involved</label>
                                        <div class="border p-3 rounded" style="max-height: 250px; overflow-y: auto;" id="unitsListContainer">
                                            <p>Please select a condominium to load the units.</p>
                                        </div>
                                        <span asp-validation-for="SelectedUnitIds" class="text-danger"></span>
                                    </div>
                                </div>
                                @if (this.User.IsInRole("CondoManager"))
                                {
                                    <div class="form-group mb-4">
                                        <label asp-for="IsResolved" class="form-label">Status</label>
                                        <div class="form-check form-switch d-flex align-items-center">
                                            <input class="form-check-input me-2" type="checkbox" id="isResolvedSwitch" asp-for="IsResolved">
                                            <label class="form-check-label" for="isResolvedSwitch" id="isResolvedLabel">
                                                @if (Model.IsResolved)
                                                {
                                                    <span class="text-success">Resolved</span>
                                                }
                                                else
                                                {
                                                    <span class="text-danger">Unresolved</span>
                                                }
                                            </label>
                                        </div>
                                        <span asp-validation-for="IsResolved" class="text-danger"></span>
                                    </div>
                                }
                                
                            </div>
                            <div class="form-group mt-3 d-flex justify-content-between align-items-center">
                                <a asp-action="IndexOccurrences" class="btn btn-outline-secondary">Back to List</a>
                                <button type="submit" class="btn btn-primary">Save Changes</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script type="text/javascript">
        document.addEventListener('DOMContentLoaded', function () {
            // Inicializa o DatePicker
            var dateValue = '@(Model.DateAndTime.HasValue ? Model.DateAndTime.Value.ToString("MM-dd-yyyy") : "")';
            var DateAndTimePicker = new ej.calendars.DatePicker({
                format: 'MM/dd/yyyy',
                placeholder: 'Select a date',
                max: new Date(),
                value: dateValue ? new Date(dateValue) : null
            });
            DateAndTimePicker.appendTo('#dateAndTime');

            // Script para o switch de status
            const isResolvedSwitch = document.getElementById('isResolvedSwitch');
            const isResolvedLabel = document.getElementById('isResolvedLabel');

            if (isResolvedSwitch.checked) {
                isResolvedLabel.innerHTML = '<span class="text-success">Resolved</span>';
            } else {
                isResolvedLabel.innerHTML = '<span class="text-danger">Unresolved</span>';
            }

            isResolvedSwitch.addEventListener('change', function() {
                if (this.checked) {
                    isResolvedLabel.innerHTML = '<span class="text-success">Resolved</span>';
                } else {
                    isResolvedLabel.innerHTML = '<span class="text-danger">Unresolved</span>';
                }
            });

            
            function loadUnits(condoId, selectedUnits) {
                var unitsContainer = $('#unitsListContainer');
                unitsContainer.empty();

                if (condoId) {
                    $.ajax({
                        url: `/GetCondoUnitsList/${condoId}`,
                        type: 'GET',
                        dataType: 'json',
                        success: function (units) {
                            if (units.length > 0) {
                                $.each(units, function (i, unit) {
                                    // Verifique se a unidade deve ser selecionada
                                    var isChecked = selectedUnits.includes(parseInt(unit.value)) ? 'checked' : '';
                                    var checkboxHtml = `
                                        <div class="form-check">
                                            <input type="checkbox"
                                                name="SelectedUnitIds"
                                                value="${unit.value}"
                                                id="unit_${unit.value}"
                                                class="form-check-input"
                                                ${isChecked} />
                                            <label class="form-check-label" for="unit_${unit.value}">
                                                ${unit.text}
                                            </label>
                                        </div>`;
                                    unitsContainer.append(checkboxHtml);
                                });
                            } else {
                                unitsContainer.append('<p>No units available for this condominium.</p>');
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error("Error fetching units: " + error);
                            unitsContainer.append('<p>Error loading units. Please try again.</p>');
                        }
                    });
                }
            }

            // Chame a função quando a página for carregada, usando os dados do modelo
            var initialCondoId = $('#condominiumSelect').val();
            var initialSelectedUnits = @(Html.Raw(Json.Serialize(Model.SelectedUnitIds)));
            if (initialCondoId) {
                loadUnits(initialCondoId, initialSelectedUnits);
            }

            // Ative a função também no evento de mudança, para permitir a troca de condomínio
            $('#condominiumSelect').change(function () {
                var condoId = $(this).val();
                loadUnits(condoId, []); // Passe um array vazio, já que não há unidades pré-selecionadas
            });
        });
    </script>
}